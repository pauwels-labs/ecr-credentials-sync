apiVersion: batch/v1
kind: Job
metadata:
  name: "${credentialname:=ecr}-credentials-sync-bootstrap"
  labels:
    app.kubernetes.io/instance: credentials-sync
    app.kubernetes.io/component: ${credentialname:=ecr}
  annotations:
    helm.sh/hook: post-install,post-upgrade,post-rollback
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  template:
    spec:
      serviceAccountName: "${credentialname:=ecr}-credentials-sync"
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      restartPolicy: Never
      volumes:
      - name: aws
        emptyDir:
          medium: Memory
      - name: token
        emptyDir:
          medium: Memory
      containers:
      - image: 274295908850.dkr.ecr.eu-west-1.amazonaws.com/amazon/aws-cli-with-jq:2.7.33
        name: get-token
        env:
        - name: APP_MODE
          value: ""
        - name: APP_OIDC_URL
          value: ""
        - name: APP_OIDC_CLIENTID
          value: ""
        - name: APP_OIDC_TENANT_NAME
          value: ""
        - name: APP_OIDC_USERNAME
          value: ""
        - name: APP_OIDC_PASSWORD
          value: ""
        - name: APP_OIDC_AWS_ROLE_NAME
          value: ""
        - name: APP_OIDC_SKIP_ECR
          value: ""
        - name: APP_AWS_ACCOUNT_ID
          value: ""
        - name: APP_AWS_REGION
          value: ""
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 300m
            memory: 128Mi
          requests:
            cpu: 300m
            memory: 128Mi
        volumeMounts:
        - mountPath: /token
          name: token
        - mountPath: /.aws
          name: aws
        command:
        - /bin/sh
        - -c
        - |-
          # Envs used for configuration:
          #
          # APP_MODE: <irsa|oidc>, indicates whether to auth with
          # IRSA or OIDC tokens
          #
          # APP_OIDC_URL: "", if using OIDC mode, the
          # OIDC-compliant discovery URL without the
          # /.well-known/openid-configuration component
          #
          # APP_OIDC_CLIENTID: "", if using OIDC mode, the OIDC
          # client to login with
          #
          # APP_OIDC_TENANT_NAME: "", if using OIDC mode, the OIDC
          # tenant to login under
          #
          # APP_OIDC_USERNAME: "", if using OIDC mode, the OIDC
          # username to login with
          #
          # APP_OIDC_PASSWORD: "", if using OIDC mode, the OIDC
          # password to login with
          #
          # APP_OIDC_AWS_ROLE_NAME: "", if using OIDC mode, the
          # AWS role to assume
          #
          # APP_OIDC_SKIP_ECR: "", if using OIDC mode, set to true to
          # skip fetching the ECR token and write the OIDC JWT to a
          # secret instead
          #
          # APP_AWS_ACCOUNT_ID: "", if using OIDC mode, the
          # AWS account the role is in
          #
          # APP_AWS_REGION: "", AWS region where the registry is
          # located

          #!/bin/sh
          # Waits for the Istio sidecar to become available
          i=0
          echo "WAITING FOR SIDECAR"
          until curl --silent -o /dev/null "http://localhost:15021/healthz/ready"; do
            i=$((i+1))
            if [[ $i -eq 5 ]]; then
              break
            fi
            echo "WAITING FOR SIDECAR"
            sleep 3
          done
          if [[ $i -eq 5 ]]; then
            echo "SIDECAR UNAVAILABLE, RUNNING WITHOUT"
          else
            echo "SIDECAR AVAILABLE"
          fi

          command_return_code=1
          if [ "$APP_MODE" == "irsa" ]; then
            echo "IRSA MODE SELECTED"

            # Converts the IRSA mounted token into a docker token
            aws ecr get-login-password --region "$APP_AWS_REGION" > /token/ecr-token
            command_return_code=$(echo $?)
          elif [ "$APP_MODE" == "oidc" ]; then
            echo "OIDC MODE SELECTED"

            # Fetches the OIDC token URL from the OIDC discovery URL
            echo "FETCHING TOKEN ENDPOINT..."
            TOKEN_ENDPOINT=$(curl --silent "$APP_OIDC_URL/.well-known/openid-configuration" | jq -r .token_endpoint)

            # Fetches an OIDC token using the direct access grant and username and
            # password provided from env
            echo "AUTHENTICATING TO TOKEN ENDPOINT..."
            OIDC_TOKEN=$(curl --silent "$TOKEN_ENDPOINT" -H "Content-Type: application/x-www-form-urlencoded" --data-urlencode "grant_type=password" --data-urlencode "client_id=$APP_OIDC_CLIENTID" --data-urlencode "username=$APP_OIDC_USERNAME" --data-urlencode "password=$APP_OIDC_PASSWORD" | jq -r .access_token)

            if [ "$APP_OIDC_SKIP_ECR" == "true" ]; then
              echo "SKIPPING FETCH OF ECR TOKEN..."
              echo "$OIDC_TOKEN" > /token/oidc-token
              command_return_code="$?"
            else
              # Exchanges the OIDC token for AWS credentials to an assumed role and sets
              # those credentials into three envs
              echo "FETCHING ECR TOKEN..."
              command_return_code=$(echo $(aws sts assume-role-with-web-identity --role-arn "arn:aws:iam::$APP_AWS_ACCOUNT_ID:role/$APP_OIDC_AWS_ROLE_NAME" --role-session-name "$APP_OIDC_TENANT_NAME" --web-identity-token "$OIDC_TOKEN" | jq -r '.Credentials.AccessKeyId, .Credentials.SecretAccessKey, .Credentials.SessionToken') | {
                read ACCESS_KEY_ID SECRET_ACCESS_KEY SESSION_TOKEN

                # Sets the AWS credentials into the local AWS config
                aws configure set aws_access_key_id "$ACCESS_KEY_ID" --profile ecr
                aws configure set aws_secret_access_key "$SECRET_ACCESS_KEY" --profile ecr
                aws configure set aws_session_token "$SESSION_TOKEN" --profile ecr

                # Uses the AWS credentials to fetch a docker token
                aws ecr get-login-password --region "$APP_AWS_REGION" --profile "ecr" > /token/ecr-token
                echo $?
              })
            fi
          else
            echo "Current value of APP_MODE env: $APP_MODE"
            echo ""
            echo "The APP_MODE env must be set to either 'irsa' if authenticating with IAM roles for service accounts, or 'oidc' if authenticating with an IdP using a username and password"
            echo "Quitting without making any requests..."
            command_return_code=1
          fi
          exit $command_return_code
      - image: 274295908850.dkr.ecr.eu-west-1.amazonaws.com/fluxcd/flux-cli:v0.25.2
        name: create-secret
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        imagePullPolicy: IfNotPresent
        env:
        - name: APP_SECRET_NAME
          value: "${credentialname:=ecr}-credentials"
        - name: APP_AWS_ACCOUNT_ID
          value: ""
        - name: APP_AWS_REGION
          value: ""
        - name: APP_SECRET_NAMESPACE
          value: ""
        volumeMounts:
        - mountPath: /token
          name: token
        command:
        - /bin/sh
        - -c
        - |-
          #!/bin/sh
          # Waits for the Istio sidecar to become available
          i=0
          echo "WAITING FOR SIDECAR"
          until wget -qO- -o /dev/null "http://localhost:15021/healthz/ready"; do
            i=$((i+1))
            if [[ $i -eq 5 ]]; then
              break
            fi
            echo "WAITING FOR SIDECAR"
            sleep 3
          done
          if [[ $i -eq 5 ]]; then
            echo "SIDECAR UNAVAILABLE, RUNNING WITHOUT"
          else
            echo "SIDECAR AVAILABLE"
          fi

          TOKEN_FILE="/token/ecr-token"
          if [ "$APP_OIDC_SKIP_ECR" == "true" ]; then
            TOKEN_FILE="/token/oidc-token"
          fi

          # Waits for the token file to become available
          until [ -f "$TOKEN_FILE" ] && [ -s "$TOKEN_FILE" ]; do
            echo "WAITING FOR TOKEN"
            sleep 3
          done
          echo "TOKEN FOUND, CREATING SECRET"

          command_return_code=0
          if [ "$APP_OIDC_SKIP_ECR" == "true" ]; then
            kubectl create secret generic "$APP_SECRET_NAME" \
              --dry-run=client \
              --from-file="oidc-token=$TOKEN_FILE" \
              --namespace="$APP_SECRET_NAMESPACE" \
              -o yaml | kubectl apply -f -
            command_return_code=$(echo $?)
          else
            # Writes ECR token as a docker config secret to the cluster
            APP_AWS_ACCOUNT_ID="$${APP_AWS_ACCOUNT_ID#id-}"
            ECR_REGISTRY="$APP_AWS_ACCOUNT_ID.dkr.ecr.$APP_AWS_REGION.amazonaws.com"
            kubectl create secret docker-registry "$APP_SECRET_NAME" \
              --dry-run=client \
              --docker-server="$ECR_REGISTRY" \
              --docker-username="AWS" \
              --docker-password="$(cat /token/ecr-token)" \
              --namespace="$APP_SECRET_NAMESPACE" \
              -o yaml | kubectl apply -f -
            command_return_code=$(echo $?)
          fi

          # Issues the shutdown command to the Istio sidecar
          if [[ $i -lt 5 ]]; then
            echo "QUITTING SIDECAR"
            wget -qO- -o /dev/null --post-data "" http://localhost:15020/quitquitquit > /dev/null
            echo "SIDECAR SHUTDOWN COMMAND ISSUED"
          fi
          exit $command_return_code
